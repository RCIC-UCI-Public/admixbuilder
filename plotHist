#!/usr/bin/env python

import re
import sys
import os
import ruamel.yaml
import argparse
from datetime import datetime
from dateutil.parser import parse
from collections import OrderedDict

class Package(object):
    def __init__(self, line):
        self.start = None    # datetime object for start building time
        self.end = None      # datetime object for end building time
        self.minutes = None  # minutes took to build RPM package
        self.pkgname = line.split()[-1]  # package name, for example x-module.pkg

    def addTime(self, date_str, flag):
        dt_object = parse(date_str)
        if flag == 0:
            self.start = dt_object
        else:
            self.end = dt_object

    def printPackage(self):
        print("%s = %s " % (self.pkgname, self.minutes))

    def findMinutes(self):
        # calculate the difference (seconds) between the datetime objects
        # and convert to minutes
        try:
            delta = self.end - self.start
            self.minutes = delta.total_seconds() / 60
        except:
            self.minutes = None

    def getMinutes(self):
        return self.minutes

class App:
    def __init__(self, args=None):
        self.prog = args[0]
        self.args = args[1:]     # command line arguments
        self.strStart = "===== Building "
        self.strEnd = "===== Completed "
        self.packages = {}       # key is a uniq string identifier, value is a Package object
        self.fig = "histogram"   # file name to save plots

        self.parseArg()

    def parseArg(self):
        # process command line arguments 
        description = "Parse log files info (extracted from build logs) to get packages build time (in minutes).\n"
        description += "Input file contains lines with 'Building' and 'Completed' lines for each package.\n"
        description += "Use results to make histogram plots, save plots as %s.png" % self.fig
        helpinfile = "input file.\n"
        parser = argparse.ArgumentParser(description=description, formatter_class=argparse.RawTextHelpFormatter)
        # required positional argument
        parser.add_argument("infile",  action="store", help=helpinfile)

        args = parser.parse_args()
        if not os.path.isfile(args.infile):
            sys.stderr.write("Input file %s does not exist\n" % args.infile)
            sys.exit(-1)

        self.infile = args.infile
        return

    def readInput(self):
        # read input log file (already only with needed lines in any order)
        self.lines = []
        f = open(self.infile)
        for i, line in enumerate(f):
            self.lines.append (line)
        f.close()
        return

    def processTimes(self, line, flag):
        # create a Package object if new  and add it to a dictionary
        # or add a datetime to the object if the object already exist
        index1 = line.find("(")
        index2 = line.find(")")
        logprefix = line[:index1]         # uniq identifier, dict key
        date_str = line[index1+1:index2]  # time string to convert to datetime object
        if logprefix in self.packages:
            self.packages[logprefix].addTime(date_str, flag)
        else:
            self.packages[logprefix] = Package(logprefix)
            self.packages[logprefix].addTime(date_str, flag)

    def parseLines(self):
        list_building = []
        list_completed = []
        strStartLen = len(self.strStart)
        strEndLen = len(self.strEnd)
        for line in self.lines:
            index1 = line.find(self.strStart)
            if index1 > 0 :
                newline = line[:index1] + line[index1+strStartLen:]
                list_building.append(newline)
            else:
                index2 = line.find(self.strEnd)
                if index2 > 0 :
                    newline = line[:index2] + line[index2+strEndLen:]
                    list_completed.append(newline)

        # add Package object
        for i in list_building:
            self.processTimes(i, 0)
        # update Package object
        for i in list_completed:
            self.processTimes(i, 1)

        self.minutes = []
        for k,v in self.packages.items():
            v.findMinutes()
            minutes = v.getMinutes()
            if minutes: 
                self.minutes.append(minutes)
            #print (k, v.getMinutes())

    def plotTimeHist(self):
        import matplotlib.pyplot as plt
        import matplotlib.ticker as ticker
        import numpy as np

        # 2 side by side plots
        fig, (ax1, ax2) = plt.subplots(nrows=1, ncols=2, figsize=(10, 5))
        # plots parameters
        title = "Distribution of build times"
        xlabel = "Time"
        ylabelLeft = "Count / Cumulative count"
        ylabelRight = "Total time (min)"
        legendLabelHist = "Count"             # for histogram bars
        legendLabelCum = "Cumulative count"   # for cumulative counts line
        legendLabelTime = "Total time"        # for cumulative time line
        markerCount = '^'         # cumulative counts line
        markerTime = 'o'          # time line
        colorEdge = 'black'       # bar edge 
        colorHist = "royalblue"   # histogram bars
        colorCout = "dodgerblue"  # cumulative count lines
        colorTime = "crimson"     # cumulative time lines

        # -------  histogram for builds > 1 min -------
        data1 = np.array([x for x in self.minutes if x > 1]) # create data
        counts1, bins1 = np.histogram(data1, bins=int(max(data1)/10)) # histogram data
        cumulative_counts1 = np.cumsum(counts1)         # cumulative counts data
        bins_centers1 = (bins1[:-1] + bins1[1:]) / 2    # histogram bin centers on x-axis

        # cumulative time builds for each bin
        bin_indices1 = np.digitize(data1,bins1, right="True")
        bin_sums1 = [data1[bin_indices1 == i].sum() for i in range(1, len(bins1))]
        cumulative_sums1 = np.cumsum(bin_sums1)

        # histogram bars
        a,b,patches = ax1.hist(data1, bins=bins1, color=colorHist, edgecolor=colorEdge, align='mid', label=legendLabelHist) 
        # cumulative count line 
        ax1.plot(bins_centers1, cumulative_counts1, color=colorCout, linestyle='-', marker=markerCount, label=legendLabelCum)

        ax1.set_title(title + " > 1min")
        ax1.set_xlabel(xlabel + " (min)")
        ax1.set_ylabel(ylabelLeft) #, color=colorHist)
        ax1.tick_params(axis='y', labelcolor=colorHist)

        # second axis for cumulative build times
        ax1_2 = ax1.twinx()
        ax1_2.set_ylabel(ylabelRight) #, color=colorTime) 
        ax1_2.plot(bins_centers1, cumulative_sums1, color=colorTime, linestyle='-', marker=markerTime, label=legendLabelTime) # cumulative time line
        ax1_2.tick_params(axis='y', labelcolor=colorTime)

        # get the plotted objects and their labels
        lines1, labels1 = ax1.get_legend_handles_labels()
        lines2, labels2 = ax1_2.get_legend_handles_labels()
        ax1.legend(lines1 + lines2, labels1 + labels2, loc="center right")

        ax1.grid(True)
        # add count above each bar
        for patch in patches:
            height = patch.get_height()
            ax1.annotate(f'{int(height)}',
                             xy = (patch.get_x() + patch.get_width() / 2, height),
                             xytext = (0,10),
                             textcoords = "offset points",
                             ha = 'center', va = "bottom")

        # ------- histogram for builds <= 1 min -------
        data2 = np.array([x for x in self.minutes if x <= 1]) # create data 
        counts2, bins2 = np.histogram(data2, bins=12)         # histogram data. For i min time there are 12 bins are at 5 sec interval 
        cumulative_counts2 = np.cumsum(counts2)               # cumulative counts data
        bins_centers2 = (bins2[:-1] + bins2[1:]) / 2          # histogram bin centers on x-axis

        # cumulative time builds for each bin
        bin_indices2 = np.digitize(data2,bins2, right="True")
        bin_sums2 = [data2[bin_indices2 == i].sum() for i in range(1, len(bins2))]
        cumulative_sums2 = np.cumsum(bin_sums2)

        # histogram bars
        a,b,patches = ax2.hist(data2, bins=bins2, color=colorHist, edgecolor=colorEdge, align='mid', label=legendLabelHist)
        # cumulative count line
        ax2.plot(bins_centers2, cumulative_counts2, color=colorCout, linestyle='-', marker=markerCount, label=legendLabelCum)

        ax2.set_title(title + " <= 1min")
        ax2.set_xlabel(xlabel + " (sec)")
        ax2.set_ylabel(ylabelLeft) #, color = colorHist)
        ax2.tick_params(axis='y', labelcolor=colorHist)

        # second axis for cumulative build times
        ax2_2 = ax2.twinx()
        ax2_2.set_ylabel(ylabelRight) #, color=colorTime) 
        ax2_2.plot(bins_centers2, cumulative_sums2, color=colorTime, linestyle='-', marker=markerTime, label=legendLabelTime) # cumulative time line
        ax2_2.tick_params(axis='y', labelcolor=colorTime)

        # get the plotted objects and their labels
        lines3, labels3 = ax2.get_legend_handles_labels()
        lines4, labels4 = ax2_2.get_legend_handles_labels()
        ax2.legend(lines3 + lines4, labels3 + labels4, loc="center right")

        #ax2.legend(['Cumulative', 'Histogram'], loc = 'center right')
        ax2.grid(True)

        # set x-labels at 5 sec interval and make every other visible 
        labels = ["%d" % i if i % 2 == 0 else '' for i in list(range(0,60,5))]
        ax2.xaxis.set_major_locator(ticker.FixedLocator(bins_centers2))
        ax2.xaxis.set_major_formatter(ticker.FixedFormatter(labels))
        # add count above each bar
        for patch in patches:
            height = patch.get_height()
            ax2.annotate(f'{int(height)}',
                             xy = (patch.get_x() + patch.get_width() / 2, height),
                             xytext = (0,3),
                             textcoords = "offset points",
                             ha = 'center',
                             va = "bottom")
        print ("DEBUG pkgs number : ", len(self.minutes))
        print ("DEBUG sum data1   : ", sum(data1))
        print ("DEBUG sum data2   : ", sum(data2))
        print ("DEBUG sum all data: ", sum(self.minutes)) 
        print ("DEBUG avg (sec) per pkg : ", round(sum(self.minutes)/len(self.minutes)*60, 2))

        # adjust layout and save the plots
        plt.tight_layout()
        plt.savefig("%s.png" % self.fig)
        plt.close(1)
 
    def run(self):
        self.readInput()
        self.parseLines()
        self.plotTimeHist()

#####################################################
if __name__ == "__main__":
    app = App(sys.argv)
    app.run()
