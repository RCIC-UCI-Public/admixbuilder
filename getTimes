#!/usr/bin/env python

import sys
import os
import argparse
from datetime import datetime
from dateutil.parser import parse

class Admix(object):
    def __init__(self, line):
        self.start = None    # datetime object for start building time
        self.end = None      # datetime object for end building time
        self.minutes = None  # minutes took to build RPM package
        self.name = line.split()[-1]  # package name, for example x-module.pkg

    def addTime(self, date_str, flag):
        dt_object = parse(date_str)
        if flag == 0:
            self.start = dt_object
        else:
            self.end = dt_object

    def printAdmix(self):
        print("%-18s  %s " % (self.name, self.minutes))

    def findMinutes(self):
        # calculate the difference (seconds) between the datetime objects
        # and convert to minutes, round off
        try:
            delta = self.end - self.start
            self.minutes = round(delta.total_seconds() / 60)
        except:
            self.minutes = None

class App:
    def __init__(self, args=None):
        self.prog = args[0]
        self.args = args[1:]     # command line arguments
        self.strStart = "start at"
        self.strEnd = "end at"
        self.admixes = {}       # key is a uniq string identifier, value is a Package object

        # set build name and approximate time for the first admix built outside of the superbuild
        # approximate time is sufficient here
        self.firstbuild = "yaml2rpm"
        self.firstbuildTime = 3

        self.parseArg()

    def parseArg(self):
        # process command line arguments 
        description = "Parse log file info to get admix build time (in minutes).\n"
        description += "Input file (buildall.log) contains lines with 'build start' and 'build end'.\n"
        description += "Prints admix name and its build time in minutes.\n"
        helpinfile = "input file.\n"
        parser = argparse.ArgumentParser(description=description, formatter_class=argparse.RawTextHelpFormatter)
        # required positional argument
        parser.add_argument("infile",  action="store", help=helpinfile)

        args = parser.parse_args()
        if not os.path.isfile(args.infile):
            sys.stderr.write("Input file %s does not exist\n" % args.infile)
            sys.exit(-1)

        self.infile = args.infile
        return

    def readInput(self):
        # read input log file (already only with needed lines in any order)
        self.lines = []
        f = open(self.infile)
        for i, line in enumerate(f):
            self.lines.append (line)
        f.close()
        return

    def processTimes(self, line, flag):
        # create a Admix object if new  and add it to a dictionary
        # or add a datetime to the object if the object already exist

        index1 = line.find("at ")
        index2 = line.find(" ")
        name = line[:index2]         # first line item is admix name 
        date_str = line[index1+len("at "):]  # time string to convert to datetime object
        if name in self.admixes:
            self.admixes[name].addTime(date_str, flag)
        else:
            self.admixes[name] = Admix(name)
            self.admixes[name].addTime(date_str, flag)

    def parseLines(self):
        list_building = []
        list_completed = []
        for line in self.lines:
            index1 = line.find(self.strStart)
            if index1 > 0 :
                list_building.append(line)
            else:
                index2 = line.find(self.strEnd)
                if index2 > 0 :
                    list_completed.append(line)

        # add Admix object
        for i in list_building:
            self.processTimes(i, 0)
        # update Admix object
        for i in list_completed:
            self.processTimes(i, 1)

        self.minutes = []

        # print time for yaml2rpm
        print("%-18s  %s " % (self.firstbuild, self.firstbuildTime))
        for k,v in self.admixes.items():
            v.findMinutes()
            v.printAdmix()

    def run(self):
        self.readInput()
        self.parseLines()

#####################################################
if __name__ == "__main__":
    app = App(sys.argv)
    app.run()
