#!/usr/bin/env python

import sys
import os
import argparse
import subprocess

class App:
    def __init__(self, args=None):
        self.admix = None
        self.rpmsdb = {}     # registered in rpmsdb file
        self.rpmsbuilt = {}  # built by admix
        self.parseArg()

    def parseArg(self):
        # process command line arguments 
        description = "Check built RPMS against a known good size. Report discrepancies"
        helpadmix = "admix repo to check.\n"
        parser = argparse.ArgumentParser(description=description, formatter_class=argparse.RawTextHelpFormatter)

        # required positional argument
        parser.add_argument("admixname",  action="store", help=helpadmix)
        args = parser.parse_args()

        self.name = args.admixname
        self.infile = "/export/repositories/%s/.rpms.%s" % (self.name, self.name)
        self.rpmdir = "/export/repositories/%s/RPMS/*" % (self.name)
        return

    def readRpmdb(self):
        # read rpmdb  meta file, process info
        if not os.path.isfile(self.infile):
            sys.stderr.write("Rpmdb file %s does not exist\n" % self.infile)
            sys.exit(-1)

        self.lines = []
        f = open(self.infile)
        for line in f.readlines(): 
            rpmsize,rpmname = line.split()
            self.rpmsdb[rpmname] = rpmsize
        f.close()
        
        return

    def findRpms(self):
        self.cmd = "ls -l %s | grep rpm | awk '{print $5, $9}'" % self.rpmdir
        try:
            p = subprocess.Popen(self.cmd,stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True)
            (cmdoutput,cmderror) = p.communicate()
        except (subprocess.CalledProcessError, OSError):
            print ("Error running command: %s" % self.cmd)
            sys.exit()

        # command line output
        lines = cmdoutput.decode('ISO-8859-1').split("\n") # split and convert to string
        lines = list(filter(lambda x: x.strip(), lines))   # remove empty lines
        if not lines:
            return

        # all found processes
        for line in lines: 
            rpmsize,rpmname = line.split()
            self.rpmsbuilt[rpmname] = rpmsize


    def checkRpms(self):
        for key, value in self.rpmsdb.items():
            if key not in self.rpmsbuilt:
                print(f"RPM '{key}' was not built.")
            elif self.rpmsbuilt[key] < value:
                print(f"Size for RPM '{key}' differs: rpmdb has {value}, built RPM  has {self.rpmsbuilt[key]}.")

        for key in self.rpmsbuilt.keys():
            if key not in self.rpmsdb:
                print(f"RPM '{key}' is built but is not registered in rpmdb.")

    def run(self):
        self.readRpmdb()
        self.findRpms()
        self.checkRpms()

#####################################################
if __name__ == "__main__":
    app = App(sys.argv)
    app.run()
